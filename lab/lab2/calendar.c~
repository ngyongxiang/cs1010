/**
 * CS1010 AY2014/5 Semester 2 Lab2 Ex3
 * calendar.c
 * Xin Kenan
 * T01
 * A program to print calendar of certain month given
 * the year and month
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h> // included to use bool type

#define TRUE 1
#define FALSE 0
#define MAX_MON 12 

void print_calendar (int year, int month);
bool is_leap_year(int year);
int get_start_day(int year);
int * set_days_in_month(int is_leap_year);
int get_first_day_month(int month, int year_start_day,int *days_in_month);

int main()
{   

	int year,month; 

	printf ("Enter a year: ");                             
	scanf ("%d", &year);

	printf ("Enter a month: "); 
	scanf ("%d", &month);

	print_calendar(year,month);

	return 0;
}



// take in year and month (1 - 12) and print calendar
// pre-con : pre-con : year > 0 || year >1900 ; month 1 < 12
void print_calendar (int year, int month) 
{

	int year_start_day,first_day_month,i,day_counter = 1;
	int *days_in_month;

	// get start day of given year
	year_start_day = get_start_day(year);

	// set num of days of each month for further calculation
	days_in_month = set_days_in_month(is_leap_year(year));

	// get first day of month (0 - 6)
	first_day_month = get_first_day_month(month, year_start_day, days_in_month);

	// print header
	printf("Sun  Mon  Tue  Wed  Thu  Fri  Sat\n" );

	//1. print blank spaces
	for (i = 1 ; i <= first_day_month; i++){
		printf("     ");
		day_counter++;
	}

	//2. print the rest of the calendar
	//Note:1 and 2 can be combined in one loop, but 
	// might affect readability of code
	for (i = 1; i <= *(days_in_month+month-1); i++){
		// each day takes 3 place,each day is seperated by 2 space
		printf("%3d",i);
		(day_counter % 7 ==0)? printf("\n"): printf("  ");
		day_counter++;

	}

	printf("\n");
}



// take in year to calculate 
// start day of the year in Jan
// pre-con : year > 0 || year >1900
bool is_leap_year(int year){
	if ((year%400 ==0) || (year%100 != 0 && year%4 == 0))
		return TRUE;
	return FALSE;
}



// calculate start day of the year
// pre-con : year > 0 || year >1900
int get_start_day(int year){
	int start_day;
	start_day = (year + ((year-1)/4) - ((year - 1)/100) + ((year -1) /400)) % 7;

	return start_day;
}


// sets number of days in each month and return pointer of days_in_month array
// ! experimenting on return array pointer:
//  => ! c does not allow return local var to outside function, so set static
int * set_days_in_month(int is_leap_year){
	static int days_in_month[MAX_MON];
	int i;
	for (i = 0; i < MAX_MON ; i ++){
		// note: (array start from 0, month start from 1, for clarity
		// swtich statement uses case 1 = jan, case 2= feb etc, so switch(i+1)
		// actual array stores month from 0 -12 : days_in_month[0] = days in Jan
		switch((i+1)){
			case 2 :
				if (is_leap_year)
					days_in_month [i]= 29 ;
				else
					days_in_month [i] = 28 ;
				break;
			case 1 :
			case 3 :
			case 5 :
			case 7 :
			case 8 :
			case 10:
			case 12:
				days_in_month[i] = 31;
				break ;
			default :
				days_in_month[i] = 30;
		}
	}
	return days_in_month;
}



// return the first day of the month : 0 = sunday, 1 = monday ....
int get_first_day_month(int month, int year_start_day,int *days_in_month){
	int i,first_day_month,sum = 0;

	/* algorithm: 
	   1. add up all days before given month
	   2. add year_start_day to that num to get sum
	   3. sum % 7, 0 = sunday, 1 = monday ....
	   */ 
	// note : month start from 0, 0 = Jan | 1 = Feb ...

	for (i = 0; i < month - 1; i ++){
		sum+= *(days_in_month + i);
	}

	sum+=year_start_day;
	first_day_month= sum % 7;


	return first_day_month;
}
